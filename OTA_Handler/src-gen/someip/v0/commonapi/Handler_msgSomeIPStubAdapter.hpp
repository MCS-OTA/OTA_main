/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COMMONAPI_HANDLER_MSG_SOMEIP_STUB_ADAPTER_HPP_
#define V0_COMMONAPI_HANDLER_MSG_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/commonapi/Handler_msgStub.hpp>
#include <v0/commonapi/Handler_msgSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

template <typename _Stub = ::v0::commonapi::Handler_msgStub, typename... _Stubs>
class Handler_msgSomeIPStubAdapterInternal
    : public virtual Handler_msgStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< Handler_msgSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> Handler_msgSomeIPStubAdapterHelper;

    ~Handler_msgSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        Handler_msgSomeIPStubAdapterHelper::deinit();
    }

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::Handler_msgStub,
        CommonAPI::Version
    > getHandler_msgInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::commonapi::Handler_msgStub,
        std::tuple< CommonAPI::ByteBuffer, CommonAPI::ByteBuffer>,
        std::tuple< int32_t>,
        std::tuple< CommonAPI::SomeIP::ByteBufferDeployment, CommonAPI::SomeIP::ByteBufferDeployment>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int32_t>>
    > pushUpdateStubDispatcher;
    
    Handler_msgSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        Handler_msgSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< Handler_msgStub>(_stub)),
        getHandler_msgInterfaceVersionStubDispatcher(&Handler_msgStub::lockInterfaceVersionAttribute, &Handler_msgStub::getInterfaceVersion, false, true),
        pushUpdateStubDispatcher(
            &Handler_msgStub::pushUpdate,
            false,
            _stub->hasElement(0),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr)))
        
    {
        Handler_msgSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7530) }, &pushUpdateStubDispatcher );
        // Provided events/fields
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};


template <typename _Stub, typename... _Stubs>
void Handler_msgSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void Handler_msgSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v0::commonapi::Handler_msgStub, typename... _Stubs>
class Handler_msgSomeIPStubAdapter
    : public Handler_msgSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    Handler_msgSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          Handler_msgSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v0

#endif // V0_COMMONAPI_Handler_msg_SOMEIP_STUB_ADAPTER_HPP_
