/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/commonapi/Handler_msg_exterSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createHandler_msg_exterSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< Handler_msg_exterSomeIPProxy>(_address, _connection);
}

void initializeHandler_msg_exterSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.Handler_msg_exter:v0_1:commonapi.Handler_msg_exter",
        0x1237, 0x567b, 0, 1);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.Handler_msg_exter:v0_1",
        &createHandler_msg_exterSomeIPProxy);
}

INITIALIZER(registerHandler_msg_exterSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeHandler_msg_exterSomeIPProxy);
}

Handler_msg_exterSomeIPProxy::Handler_msg_exterSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          handlerStatusExter_(*this, 0x81b0, CommonAPI::SomeIP::event_id_t(0x9d08), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr)))
{
}

Handler_msg_exterSomeIPProxy::~Handler_msg_exterSomeIPProxy() {
}


Handler_msg_exterSomeIPProxy::HandlerStatusExterEvent& Handler_msg_exterSomeIPProxy::getHandlerStatusExterEvent() {
    return handlerStatusExter_;
}

void Handler_msg_exterSomeIPProxy::updateMsgExter(CommonAPI::ByteBuffer _udsRequest, CommonAPI::CallStatus &_internalCallStatus, CommonAPI::ByteBuffer &_udsResponse, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_udsRequest(_udsRequest, static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
    CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_udsResponse(static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                CommonAPI::ByteBuffer,
                CommonAPI::SomeIP::ByteBufferDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                CommonAPI::ByteBuffer,
                CommonAPI::SomeIP::ByteBufferDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x80e8),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_udsRequest,
        _internalCallStatus,
        deploy_udsResponse);
    _udsResponse = deploy_udsResponse.getValue();
}

std::future<CommonAPI::CallStatus> Handler_msg_exterSomeIPProxy::updateMsgExterAsync(const CommonAPI::ByteBuffer &_udsRequest, UpdateMsgExterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_udsRequest(_udsRequest, static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
    CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_udsResponse(static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                CommonAPI::ByteBuffer,
                CommonAPI::SomeIP::ByteBufferDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                CommonAPI::ByteBuffer,
                CommonAPI::SomeIP::ByteBufferDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x80e8),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_udsRequest,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment > _udsResponse) {
            if (_callback)
                _callback(_internalCallStatus, _udsResponse.getValue());
        },
        std::make_tuple(deploy_udsResponse));
}

void Handler_msg_exterSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> Handler_msg_exterSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace commonapi
} // namespace v0
